#
# Sets colors based on tput or other terminal coloring
#
function set_colors() {
  if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
      RED=$(tput setaf 9)
      ORANGE=$(tput setaf 172)
      YELLOW=$(tput setaf 190)
      PURPLE=$(tput setaf 141)
      WHITE=$(tput setaf 256)
    else
      RED=$(tput setaf 5)
      ORANGE=$(tput setaf 4)
      YELLOW=$(tput setaf 2)
      PURPLE=$(tput setaf 1)
      WHITE=$(tput setaf 7)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
  else
    RED="\033[1;31m"
    ORANGE="\033[1;33m"
    YELLOW="\033[1;32m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    BOLD=""
    RESET="\033[m"
  fi
}

function parse_git_dirty() {
  if [ "`git status 2> /dev/null | tail -n1`" != "nothing to commit, working directory clean" ]; then echo "*"; fi
}

function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

#
# fn_exists (fn)
# Returns a value determining if the function fn exists.
#
function fn_exists () {
  type $1 | grep -q 'shell function'
}

#
# echoc (msg color)
# Echos the msg with the specified color
#
function echoc () {
  msg=$1
  color=$2
  [ -z $color ] && color=$PURPLE || color=${!color}
  [ ! -z $color ] || color=$PURPLE
  echo "$color$msg$RESET"
}

#
# run(@)
# Runs `cmd` unless -d (i.e. DRY_RUN) is set.
#
function run () {
  echoc "$*"
  if [ -z $DRY_RUN ]; then
    "$@"
  fi
}

#
# nev (@)
# Evaluates the specified arguments to `node`
#
function nev() { node -pe "$@"; }
